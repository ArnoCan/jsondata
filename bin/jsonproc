#!/usr/bin/env python
"""A command line interface for the processing of in-memory structures of JSON data.

Command line interface for the processing of JSON data by the classes:

  * JSONTrees
  
  * JSONPointer
  
  * JSONPatch
  
  * JSONDataSerializer
  
  
The 'main' module for for the command line usage of 'jsondata' classes.
Provides the apropriate subset of methods for the command line and
scripting usage.

SYNOPSIS:
  jsonproc [--mode=<proc-mode>] [OPTIONS] [<proc-mode-params>]
  
  <proc-mode> := (diff|patch|pointerops|pointeraccess|validate)
    
  <proc-mode-params>:=(
      <diff-mode-params>
    | <validate-mode-params>
    | <pointer-ops-mode-params>
    | <pointer-access-mode-params>
    | <patch-mode-params>
  )

  <diff-mode-params> := <file0> <file1>

  <pointer-ops-mode-params> := [(pointer|pydata)] <JSONPointer-operations>

  <pointer-access-mode-params> := <file0> [(pointer|pydata)] <JSONPointer-operations>

  <patch-mode-params> := not yet implemented, ffs.

  <validate-mode-params> := <file0> [<validate-mode-params>]


  pointer := "Convert result to JSONPointer-string."
  pydata := "Convert result to native Python address."
  <JSONPointer-operations>:=(
      JSONPointer-string
    | JSONPointer-string (+|>|<|>=|<=|==|!=) <JSONPointer-operations>
  )
  JSONPointer-string := "A string in accordance to RFC6901"

OPTIONS:

  Processing mode:
      -mode= (diff|patch|pointer|validate)
          Defines processing mode:
              'diff': Displays the differences of the JSON data
                  for <file0> and <file1>.

                    jsonproc --mode=diff [OPTIONS] <file0> <file1>

              'patch': Not yet implemented, follows soon.
              
              'pointer-ops': Helper mode for command line interaction
                  for building JSON pointers.
                  
                    jsonproc --mode=pointer-ops [OPTIONS] [format] <pointer> [<pointer-ops> <pointer>]
              
              'pointer-access': Helper mode for command line interaction
                  for the application of JSON pointers on data.
                  
                    jsonproc --mode=pointer-access [OPTIONS] [format] <file0> <pointer> [<pointer-ops> <pointer>]
              
              'validate': Validates JSON data by JSONschema for <file0>.

                    jsonproc --mode=validate --schemafile=<schemafile> [OPTIONS] <file0>

         default:= validate

  Processing parameters:
      -j, --json= (json|ujson)
          Use as scanner and parser one of the verified packages:
              'json': standard package
              'ujson': ultra-json for performance, check platform availability,
                  and eventually run unit tests.
         default:= json
      -p, --pathlist= <search-path-JSON-data>
         Search path for JSON data file(s), standard list for current platform.
         default:= ../dirname(__file__)/:dirname(__file__)/:/etc/:$HOME/
      -s, --schemafile= <schemafile>
         Schema file - JSONschema.
         default: jsondatacheck.jsd
      --scope= (all|first)
         The scope of match filter for results.
         default:= all
      -V, --validator= <validator>
         Alternate validator provided by module 'jsonschema'
         - default: validate
         - draft3: Draft3Validator
         - off: None
        default:= validate

  Display options:
      --indent= #width
         The number of characters for indent.
         
         default:= 4
      -i, --interactive
         Dialog mode, displays formatted for interactive JSON and 
         JSONschema design.
      --linefit= (raw|cut|wrap)
         The handling of lines exceeding width.
         
         default:= raw
      --linewidth= #width
         The number of characters.
         
         default:= 80
      -X --terse:
          Display for post-processing.

  Generic:
      -d, --debug
         Debug entries, does NOT work with 'python -O ...'.
         Developer output, aimed for filtering.
      -h, --help
         This help.
      -v, --verbose
         Verbose, some relevant states for basic analysis.
         When '--selftest' is set, repetition raises the display level.
      --version
         Current version - terse.
      --Version
         Current version - detailed.
    

     
  --selftest
     Performs a basic functional selftest by load, verify, and validate.
     0. jsondata/data.json + jsondata/schema.jsd
     1. jsondata/selftest.json + jsondata/selftest.jsd


PYTHON OPTIONS:
  -O, -OO
   Eliminates '__debug__' code.
   
"""
__author__ = 'Arno-Can Uestuensoez'
__license__ = "Artistic-License-2.0 + Forced-Fairplay-Constraints"
__copyright__ = "Copyright (C) 2015-2016 Arno-Can Uestuensoez @Ingenieurbuero Arno-Can Uestuensoez"
__version__ = '0.2.1'
__uuid__='63b597d6-4ada-4880-9f99-f5e0961351fb'


try:
    from jsondata.JSONDataSerializer import JSONDataSerializer as ConfigData
    from jsondata.JSONTree import JSONTree
    #from jsondata.JSONPointer import JSONPointer
    from jsondata.JSONCompute import JSONCompute
    from jsondata.JSONDataExceptions import JSONDataParameter

except Exception as e:
    print "\n#\n#*** Set 'PYTHONPATH' ("+str(e)+")\n#\n"
# name of application, used for several filenames as default
_APPNAME = "jsonproc"

#
#--- fetch options
#
import getopt, sys, os
 
def usage():
    if __name__ == '__main__':
        import pydoc
        #FIXME: literally displayed '__main__'
        print pydoc.help(__name__)
    else:
        help(str(os.path.basename(sys.argv[0]).split('.')[0]))

_kargs={}
try:
    _longopts = [
        "help","debug","verbose","version","Version",
        "schemafile=","validator=",
        "pathlist=", "reffile",
        "interactive", "selftest", "json=",
        "scope=", "linefit=", "indent=", "linewidth=",
        "mode=", "quiet","terse",
    ]
    _opts, _args = getopt.getopt(sys.argv[1:], "j:s:p:qr:hdvV:X", _longopts)
except getopt.GetoptError, err:
    print str(err)
    usage()
    sys.exit(2)

_appname = _APPNAME

_selftest = False
_verbose = 0

MODE_VALIDATE = 0
"""load and validate only"""

MODE_DIFF = 1
"""load and display differences""" 

MODE_POINTER_OPS = 2
"""compute pointers""" 

mode = MODE_VALIDATE
"""default mode"""


quiet = False
for _o,_a in _opts:
    if _o == "--selftest":
        _selftest = True

#FIXME:
#     elif _o in ("--charset"):
#         if _a == 'str':
#             _kargs['charset'] = _a
#         elif _a == 'utf':
#             _kargs['charset'] = _a

    elif _o in ("--mode"):
        if _a == 'diff':
            mode = MODE_DIFF
        elif _a == 'validate':
            mode = MODE_VALIDATE
        elif _a == 'pointer-ops':
            mode = MODE_POINTER_OPS
        else:
            raise JSONDataParameter("mode:"+str(_o)+"="+str(_a))
    elif _o == "--scope":
        if _a == 'all':
            _kargs['scope'] = _a
        elif _a == 'first':
            _kargs['scope'] = _a

    elif _o in ("--linefit"):
        if _a == 'cut':
            _kargs['linefit'] = _a
        elif _a == 'wrap':
            _kargs['linefit'] = _a
    
    elif _o in ("--linewidth"):
        if _a.isdigit():
            _kargs['linewidth'] = int(_a)
    
    elif _o in ("--indent"):
        if _a.isdigit():
            _kargs['indent'] = int(_a)

    elif _o in ("-j","--json"):
        if _a == 'ujson':
            import ujson as myjson
        else:
            import json as myjson

    elif _o in ("-p","--pathlist"):
        _kargs['pathlist'] = _a
    
    elif _o in ("-q","--quiet"):
        quiet = True
        _kargs['quiet'] = True

    elif _o in ('-s','--schemafile'):
        _kargs['schemafile'] = _a
    
    elif _o in ("-V","--validator"):
        _kargs['validator'] = _a

    elif _o in ("-i", "--interactive"):
        _kargs['interactive'] = True

    elif _o in ("-X","--terse"):
        _terse = True
        _kargs['terse'] = True

    elif _o in ("-d","--debug"):
        _kargs['debug'] = True
        
    elif _o in ("-v","--verbose"):
        _verbose += 1
        
    elif _o in ("-h","--help"):
        usage()
        sys.exit()

    elif _o in ("--version"):
        print str(__version__)
        sys.exit()
        
    elif _o in ("--Version"):
        print "app:      "+str(_APPNAME)
        print "version:  "+str(__version__)
        print "author:   "+str(__author__)
        print "copyright:"+str(__copyright__)
        print "license:  "+str(__license__)
        print "file:     "+str(os.path.basename(__file__))
        sys.exit()

    else:
        assert False, "unhandled option"

if _selftest:
    try:
        from jsondata.Selftest import runselftest
    except Exception as e:
        print "\n#\n#*** Set 'PYTHONPATH' ("+str(e)+"\n"
        print "\n#sys.path="+str(sys.path)+"\n#\n"

    # name of application, used for several filenames as default
    _appname = "selftest"
    if _verbose>0:
        _kargs['_verbose'] = _verbose 
    stest = runselftest(_appname,**_kargs)

elif mode == MODE_VALIDATE:
    if len(_args)>1:
        raise JSONDataParameter("Files:1 supported, more provided("+str(len(_args))+"):"+str(_args))
    if len(_args)<1:
        raise JSONDataParameter("Files:1 required, less provided("+str(len(_args))+"):"+str(_args))
    if _verbose>0:
        _kargs['verbose'] = True 
    if _terse:
        _kargs['terse'] = True 
    _kargs['datafile'] = _args[0]
    ret = 0

    if not quiet:
        if _kargs.get('datafile'):
            print "data:   %s"%(os.path.basename(_kargs['datafile']))
        if _kargs.get('schemafile'):
            print "schema: %s"%(os.path.basename(_kargs['schemafile']))
        else:
            print "schema: %s"%(os.path.basename(_kargs['datafile']).replace(".json",".jsd"))
    
    if quiet:
        try:
            configdata = ConfigData(_appname,**_kargs)
        except:
            ret = 1
    else:
        configdata = ConfigData(_appname,**_kargs)

    if not quiet:
        print "validate(data,schema)=%d"%(ret)

elif mode == MODE_DIFF:
    if len(_args)>2:
        raise JSONDataParameter("Files:2 supported:"+str(_args))
    if len(_args)<2:
        raise JSONDataParameter("Files:2 required:"+str(_args))
    if _verbose>0:
        _kargs['verbose'] = True 
    _kargs['datafile'] = _args[0]
    a = _args[1]

    if not quiet:
        print "n0:%s"%(os.path.basename(_args[0]))
        print "n1:%s"%(os.path.basename(a))
    configdata = ConfigData(_appname,**_kargs)
    _kargs['datafile'] = a
    datax = ConfigData(_appname,**_kargs)
    diff = JSONTree(**_kargs)
    ret = diff.fetchDiff(configdata.data, datax.data)
    if ret:
        ret = 0
    else:
        ret = 1
    if _verbose>0:
        print "#-------------"
        print "%s: %d"%(os.path.basename(a),ret)
        print "#-------------"
    if not quiet:
        print diff.printDiff()
        print "diff(n0,n1)=%d"%(ret)
    
    sys.exit(ret)

elif mode == MODE_POINTER_OPS:
    if _verbose>0:
        _kargs['verbose'] = True 
    ret = 0
    if quiet:
        try:
            pointer = JSONCompute(_args)
        except:
            ret = 1
    else:
        _ka = {}
        if _kargs.get('debug'):
            _ka = {'debug':True}
        if _verbose>0:
            _ka = {'verbose':True}
        pointer = JSONCompute(_args,**_ka)

    if not quiet:
        if type(pointer.result) in (str,unicode):
            print "pointer-ops("+str(" ".join(_args))+")=%s"%(pointer.result)
        elif type(pointer.result) in (int,float):
            print "pointer-ops("+str(" ".join(_args))+")=%d"%(pointer.result)
        else:
            print "pointer-ops("+str(" ".join(_args))+")=%s"%(str(pointer.result))
            
else:
    raise JSONDataParameter("Parameter:mode:"+str(mode))
